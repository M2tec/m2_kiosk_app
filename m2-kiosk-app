#!/usr/bin/python3
import os
import argparse

import json
import requests
from pprint import pprint

from m2_util import *
from payment_types import *
from payment_validators import *

import gi
gi.require_version('Gdk', '3.0')
gi.require_version("Gtk", "3.0")
gi.require_version('Soup', '2.4')
from gi.repository import Gio, GLib, Gdk, Gtk, GdkPixbuf, Soup

ROOT_DIR = os.path.dirname(os.path.realpath(__file__)) # This is your Project Roo
# Handle command line arguments
parser = argparse.ArgumentParser(description='M2 Kiosk App for processing blockchain payments.')
parser.add_argument('-t', '--test-mode', help='Start in test mode')
parser.add_argument('-p', '--odoo-port', help='Specify Odoo port number', default='8069')
args = parser.parse_args()

f = open(ROOT_DIR + '/m2_config.json')
config_data = json.load(f)
f.close()

import request_handlers as rh

secret_code = "1199"

def fullscreen_at_monitor(window, n):

    display = Gdk.Display.get_default()
    monitor = Gdk.Display.get_monitor(display, n)
    geometry = monitor.get_geometry()
    x = geometry.x
    y = geometry.y

    print(str(x) + ' x ' + str(y))
    window.move(x,y)
    window.fullscreen()
    window.Decorated = False

def on_pinpad_grid_button_press_event(widget,event, builder):
    #print(widget.get_label())
    
    pin_entry_obj = builder.get_object("pin_label")
    pin_entry = pin_entry_obj.get_label()
 
    if len(pin_entry) >= 4:
        pin_entry = '' 
        
    button_label = widget.get_label()
    
    if button_label == "gtk-go-back":
        print("back")
        pin_disable(builder)
        return
            
    pin_entry += button_label    
    #print(pin_entry)
    
    if pin_entry == secret_code:
        Gtk.main_quit()
        
    pin_entry_obj.set_label(pin_entry)  
  
def pin_enable(builder_env):
    main_box = builder_env.get_object("main_box")
    pinpad_grid = builder_env.get_object("pinpad_grid")
    window1 = builder_env.get_object("window1")
    
    window1.remove(main_box)
    window1.add(pinpad_grid)
    
    
def pin_disable(builder_env):
    main_box = builder_env.get_object("main_box")
    pinpad_grid = builder_env.get_object("pinpad_grid")
    window1 = builder_env.get_object("window1")
    
    window1.remove(pinpad_grid)
    window1.add(main_box)

    
def box_clicked(widget, event, builder_env):
    pin_enable(builder_env)

        

if __name__ == "__main__":

    # Create a server to listen to requests
    server = Soup.Server()
    server.listen_all(9090, Soup.ServerListenOptions(0))
    data = 'hallo'
    server.add_handler("/payment-request", rh.payment_request, data)
    server.add_handler("/payment-status", rh.payment_status, data)    
    server.add_handler("/clear-display", rh.clear_display_request, data)

    builder = Gtk.Builder()
    builder.add_from_file(ROOT_DIR + "/paypad.glade")

    server.builder_env = builder
    server.payment_image = builder.get_object("payment_image")
    server.payment_label = builder.get_object("amount_label")
    server.payment_box = builder.get_object("payment_box")
    server.pinpad_grid = builder.get_object("pinpad_grid")

    server.pinpad_0 = builder.get_object("pin_0")    
    server.pinpad_1 = builder.get_object("pin_1")
    server.pinpad_2 = builder.get_object("pin_2")
    server.pinpad_3 = builder.get_object("pin_3")
    server.pinpad_4 = builder.get_object("pin_4")
    server.pinpad_5 = builder.get_object("pin_5")
    server.pinpad_6 = builder.get_object("pin_6")
    server.pinpad_7 = builder.get_object("pin_7")
    server.pinpad_8 = builder.get_object("pin_8")
    server.pinpad_9 = builder.get_object("pin_9")
    server.pinpad_back = builder.get_object("pin_back")

    server.pinpad_0.connect("button-release-event", on_pinpad_grid_button_press_event, builder)    
    server.pinpad_1.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_2.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_3.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_4.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_5.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_6.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_7.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_8.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_9.connect("button-release-event", on_pinpad_grid_button_press_event, builder)
    server.pinpad_back.connect("button-release-event", on_pinpad_grid_button_press_event, builder)

    server.payment_image_event = builder.get_object("payment_image_event")
    server.payment_image_event.connect("button-release-event", box_clicked, builder)

    # Setup gtk builder
    headerbar = Gtk.HeaderBar()
    headerbar.set_title("M2 PayPad")
    headerbar.set_show_close_button(False)

    set_payment_image(server.payment_image)

    window1 = builder.get_object("window1")
    window1.set_titlebar(headerbar)
    window1.show_all()
    server.payment_box.hide()

    pinpad_grid = builder.get_object("pinpad_grid")
    window2 = builder.get_object("window2")
    window2.remove(pinpad_grid)

    #fullscreen_at_monitor(window1, 0)

    Gtk.main()

    print("Exiting...")

