#!/bin/python3

import argparse
import gi
import json

import requests
from datetime import datetime

from cardano.wallet import Wallet
from cardano.wallet import WalletService

from cardano.backends.walletrest import WalletREST

from m2_paypad_dbus import *
from m2_util import *

gi.require_version("Gtk", "3.0")
from gi.repository import Gio, GLib, Gtk, GdkPixbuf

ws = WalletService(WalletREST(port=8090))

# Handle command line arguments
parser = argparse.ArgumentParser(description='M2 Kiosk App for processing blockchain payments.')
parser.add_argument('-p', '--odoo-port', help='specify Odoo port number')
args = parser.parse_args(['--odoo-port', '8069'])

odoo_port = args.odoo_port
wallet_port = 8090

builder = Gtk.Builder()
builder.add_from_file("paypad.glade")
amount_label = builder.get_object("amount_label")
window1 = builder.get_object("window1")

headerbar = Gtk.HeaderBar()
headerbar.set_title("M2 PayPad")
headerbar.set_show_close_button(False)
window1.set_titlebar(headerbar)

#window1.set_show_close_button(False)
image1 = builder.get_object("image1")
pixbuf = GdkPixbuf.Pixbuf.new_from_file('./static/default.png')
pixbuf = pixbuf.scale_simple(380, 380, GdkPixbuf.InterpType.BILINEAR)
image1.set_from_pixbuf(pixbuf)   

def transactions(wallet_id, transaction_id):
    wal0 = Wallet(wallet_id, backend=WalletREST(port=wallet_port))
    wal0.sync_progress()
    
    wallet_balance = wal0.balance().total
    #print(wal0.balance().total)
    
    tnxs = wal0.transactions()
    
    transact = []
    
    result = "OK"
    
    for tnx in tnxs:
        tnx_dict = {'id': tnx.txid, 'fee': tnx.fee, 'input': tnx.amount_in, 'output': tnx.amount_out, 'metadata': tnx.metadata, 'status' : tnx.status}
        
        #print(dir(tnx))
        #print(json.dumps(tnx, indent=4, sort_keys=False))
        #print(repr(tnx_dict))
        #print("\n")
        #transact.append(tnx_dict)   
        
        metadata = tnx.metadata
        #print(metadata.keys())
        
        tx_id = ''
        
        try:
            tx_id = metadata[73]['title']
            #print('tx_id: ' + str(tx_id))
        except KeyError:
            pass
    
        #print("tx_id = " + tx_id + " and transaction_id = " + transaction_id)
        if tx_id != '' and tx_id == transaction_id:
            print("success")
            result = "success"          
            
    return result

def confirm_payment(service_id):
    TIMEOUT = 10
    endpoint = 'http://localhost:' + odoo_port + '/pos_cardano/notification'
    
    headers = {
        'Content-Type': 'application/json'
    }

    confirmation_data = {
        "SaleToPOIResponse": {"PaymentResponse": {"Response": { "Result" : "Success"}, "PaymentResult" : { "AmountsResp" : "-",  "AmountsResp" : "-"} },
                              "MessageHeader": {"MessageCategory": "Payment",
                                                "MessageClass": "Service",
                                                "MessageType": "Response",
                                                "POIID": "Terminal1",
                                                "ProtocolVersion": "3.0",
                                                "SaleID": "x",
                                                "ServiceID": service_id}}}
    request_odoo = requests.post(endpoint, data=json.dumps(confirmation_data), headers=headers, timeout=TIMEOUT) 

class Runner:
    def __init__(self, num_times):
        self.num_times = num_times
        self.count = 0

    def __call__(self, *args):
        transaction_id = args[0]
        service_id = args[1]
        wallet_id = args[2]
                        
        result = transactions(wallet_id, transaction_id)
        
        print("result = "  + result )
        if result == "success":
            print("go to confirm payment")
            confirm_payment(service_id)
            self.count = self.num_times
            
        self.count += 1
        print("Periodic timer [{}]: args={}".format(self.count, args))
        
        return self.count < self.num_times

check_blockchain = Runner(100)

def create_transaction_json(transaction_id, wallet_address, amount):


    print('shop code: ' + transaction_id + str(wallet_address) + str(amount))
    metadata_dict = {
        '123': {'message': transaction_id}
    }
        
    amounts_dict_1 = {
        'quantity': str(int(amount * 1000000)), 
        'policyId': 'ada', 
        'assetName': 'ada'
    }
    
    amounts_list = [ amounts_dict_1 ]
    
    outputs_dict = { 
        wallet_address : amounts_list
    }

    transaction_dict = {
        'type': 'tx', 
        'title': transaction_id, 
        'outputs': outputs_dict,
    }

    print(json.dumps(transaction_dict, indent=4, sort_keys=True))
    
    return json.dumps(transaction_dict)

def create_qr_code(transaction_id, wallet_address, amount ):

    tx_json = create_transaction_json(transaction_id, wallet_address, amount)
   
    filename_qr_code = 'static/shop_qr_code-' + transaction_id + '.png'
    print(filename_qr_code)    
    
    cardano_net = 'testnet'    
    gc_cli = '/home/maarten/cardano-src/m2_kiosk_app/node_modules/gamechanger-dapp-cli/cli.js'
    command_list = [gc_cli, cardano_net, 'build', 'qr', '-a', tx_json, '-o', filename_qr_code]
    result = subprocess.run(command_list, stdout=subprocess.PIPE)

if __name__ == "__main__":

    check_odoo_and_cardano(odoo_port, wallet_port)

    check_cardano_wallets(ws)
    
    # Start a system message bus for the paypad
    owner_id = Gio.bus_own_name(
        Gio.BusType.SYSTEM,  
        "org.m2tec.paypad",  
        Gio.BusNameOwnerFlags.NONE,  
        on_bus_acquired,
        on_name_acquired,
        on_name_lost,
    )
    
    window1.show_all()

    Gtk.main() 
    Gio.bus_unown_name(owner_id)
    print("Exiting...")

