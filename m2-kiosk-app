#!/usr/bin/python3

#
# This file is part of the m2-kiosk-app distribution (https://github.com/M2tec/m2_kiosk_app).
# Copyright (c) 2023 Maarten Menheere.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

from payment_validators import *
from payment_types import *

import m2_util
from pprint import pprint
import signal
import requests
import json
import socket
import platform
import argparse
import os
import request_handlers as rh
import random
from datetime import datetime
import locale

import gi
gi.require_version('Gdk', '3.0')
gi.require_version("Gtk", "3.0")
gi.require_version('Soup', '2.4')
from gi.repository import Gio, GLib, Gdk, Gtk, GdkPixbuf, Soup  # NOQA

# This is your Project Root
ROOT_DIR = os.path.dirname(os.path.realpath(__file__))

secret_code = "1199"

def get_host_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        host_ip = s.getsockname()[0]
        # print(host_ip)
        s.close()

    except BaseException:
        print("Unable to get an ip address")
        host_ip = ""
        pass

    return host_ip


def get_domain_name(ip_address):
    try:
        result = socket.gethostbyaddr(ip_address)
        dns_name = list(result)[0]
    except BaseException:
        print("Unable to get an ip address")

    return dns_name


def fullscreen_at_monitor(window, n):

    display = Gdk.Display.get_default()
    monitor = Gdk.Display.get_monitor(display, n)
    geometry = monitor.get_geometry()
    x = geometry.x
    y = geometry.y

    # print(str(x) + ' x ' + str(y))
    window.move(x, y)
    window.fullscreen()
    window.Decorated = False

if __name__ == "__main__":

    # Create a server to listen to requests
    server = Soup.Server()
    server.listen_all(9090, Soup.ServerListenOptions(0))
    data = ''
    server.add_handler("/payment-request", rh.payment_request, data)
    server.add_handler("/payment-status", rh.payment_status, data)
    server.add_handler("/clear-display", rh.clear_display_request, data)

    # Connect start panel to server object
    server.start_main_box = builder.get_object("start_main_box")
    server.vendor_image = builder.get_object("vendor_image")
    m2_util.set_payment_image(server.vendor_image)

    # Connect payment panel to server object
    server.payment_main_box = builder.get_object("payment_main_box")
    window3 = builder.get_object("window3")
    window3.remove(server.payment_main_box)

    server.payment_image = builder.get_object("payment_image")
    server.token_name = builder.get_object("token_name")
    server.token_image = builder.get_object("token_image")
    server.payment_label = builder.get_object("amount_label")

    server.payment_image_event = builder.get_object("payment_image_event")
    m2_util.set_payment_image(server.payment_image)

    # Connect admin panel to server object
    server.admin_main_box = builder.get_object("admin_main_box")
    window2 = builder.get_object("window2")
    window2.remove(server.admin_main_box)

    server.pin_entry_obj = builder.get_object("pin_label")
    server.ip_address_info = builder.get_object("ip_address_info")

    # Connect tip panel to server object
    server.tip_main_box = builder.get_object("tip_main_box")
    window4 = builder.get_object("window4")
    window4.remove(server.tip_main_box)

    server.tip_digits = ''
    server.tip_amount_label = builder.get_object("tip_amount_label")

    # Handlers are defined in the glade file in the widget properties -> signal tab
    # signal handler name should be the same ase the function name
    class Handlers:
        def __init__(self):
            """ Create a new point at the origin """
            self.server = server
        
        def onDeleteWindow(self, *args):
            Gtk.main_quit(*args)
            print("Exiting...")
               
        def button_released(self, button):
            print(button.get_name())  
            print(self.data)

        def change_panel(self, widget, arg=1):
            print(arg)
            widget_name = widget.get_name()
            print(widget_name)
            
            if widget_name == "tip_enable":
                panel = self.server.tip_main_box  
                
                tip_amount = 0
                tip_amount = locale.format_string('%.2f', tip_amount)
                server.tip_amount_label.set_text(tip_amount)
                    
            elif widget_name == "admin_enable":
                panel = self.server.admin_main_box
                                
                try:
                    host_ip = get_host_ip()
                    dns_name = get_domain_name(host_ip)
                    server.ip_address_info.set_text("https://" + dns_name + "  or  https://" + host_ip)
                except Exception as e:
                    print(e)
                    dns_name = ""
                    pass
                    
            elif widget_name == "start_enable":
                panel = self.server.start_main_box
                      
            rh.remove_child_widget(self.server)
            server.window1.add(panel)
            server.window1.show_all()        


        def on_admin_pad_button_release_event(self, widget):
        # print(widget.get_label())
            print("Handled")
            pin_entry = self.server.pin_entry_obj.get_label()

            if len(pin_entry) >= 4:
                pin_entry = ''

            button_label = widget.get_label()

            if button_label == "gtk-go-back":
                # print("back")
                admin_panel_disable(self.server)
                return

            pin_entry += button_label
            # print(pin_entry)

            if pin_entry == secret_code:
                Gtk.main_quit()

            self.server.pin_entry_obj.set_label(pin_entry)

        def on_tip_pad_button_release_event(self, widget):

            if len(self.server.tip_digits) >= 6:
                return

            tip_digit = widget.get_label()
            # print(tip_digit)

            self.server.tip_digits += tip_digit
            # print(self.server.tip_digits)

            tip_amount = int(self.server.tip_digits) / 100
            # print(tip_amount)

            config_data = m2_util.get_config_data()
            locale_setting = config_data["globals"]["locale_setting"]
            locale.setlocale(locale.LC_ALL, locale_setting)

            tip_amount = locale.format_string('%.2f', tip_amount, grouping=True)
            self.server.tip_amount_label.set_text(tip_amount)


        def on_tip_pad_ok_release_event(self, widget):
            print("Tip amount = " + self.server.tip_digits)
            tip_amount = int(self.server.tip_digits) / 100

            config_data = m2_util.get_config_data()

            network_type = config_data["cardano"]["network_type"]

            if network_type == 'testnet':
                wallet_address = config_data["cardano"]["testnet_wallet_address"]
            elif network_type == 'mainnet':
                wallet_address = config_data["cardano"]["mainnet_wallet_address"]

            randomID = random.randint(0, 9999)

            now = datetime.now()
            d1 = now.strftime("%y%m%d-%H%M")

            transaction_id = d1 + "-" + str(randomID)
            print(transaction_id)

            json_data = {
                "network_type": network_type,
                "transaction_id": transaction_id,
                "wallet_address": wallet_address,
                "token_policyID": "ada",
                "token_name": "ADA",
                "amount": tip_amount}

            pprint(json_data)
            print()

            rh.payment_request_simple(self.server, json_data)

        def on_tip_clear_button_release_event(server, widget):
            self.server.tip_digits = ''

            config_data = m2_util.get_config_data()
            locale_setting = config_data["globals"]["locale_setting"]
            locale.setlocale(locale.LC_ALL, locale_setting)

            tip_amount = 0
            tip_amount = locale.format_string('%.2f', tip_amount)
            self.server.tip_amount_label.set_text(tip_amount)

    # Setup gtk builder
    builder = Gtk.Builder()
    builder.add_from_file(ROOT_DIR + "/paypad.glade")
    #server.builder_env = builder
    builder.connect_signals(Handlers())

    # Setup main window
    headerbar = Gtk.HeaderBar()
    headerbar.set_title("M2 PayPad")
    headerbar.set_show_close_button(False)

    server.window1 = builder.get_object("window1")
    server.window1.set_titlebar(headerbar)
    server.window1.show_all()
 
    # if platform.machine() == 'aarch64':
    # Do not go fulllscreen on developement box
    if platform.machine() != 'x86_64':
        fullscreen_at_monitor(server.window1, 0)

    server.window1.connect('destroy', Gtk.main_quit)
    GLib.unix_signal_add(GLib.PRIORITY_DEFAULT, signal.SIGINT, Gtk.main_quit)
 
    Gtk.main()

    print("Exiting...")
