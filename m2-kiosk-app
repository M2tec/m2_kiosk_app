#!/bin/python3

import argparse
import gi
import json
import requests
from pprint import pprint

from escpos.printer import Usb

from m2_util import *
from payment_types import *
from payment_validators import *

gi.require_version("Gtk", "3.0")
gi.require_version('Soup', '2.4')
from gi.repository import Gio, GLib, Gtk, GdkPixbuf, Soup

from cardano.wallet import Wallet
from cardano.wallet import WalletService
from cardano.backends.walletrest import WalletREST
ws = WalletService(WalletREST(port=8090))


# Handle command line arguments
parser = argparse.ArgumentParser(description='M2 Kiosk App for processing blockchain payments.')
parser.add_argument('-t', '--test-mode', help='Start in test mode')
parser.add_argument('-p', '--odoo-port', help='Specify Odoo port number')
args = parser.parse_args(['--odoo-port', '8069'])

odoo_port = args.odoo_port
wallet_port = 8090

builder = Gtk.Builder()
builder.add_from_file("/usr/share/m2-kiosk-app/paypad.glade")
amount_label = builder.get_object("amount_label")
window1 = builder.get_object("window1")

headerbar = Gtk.HeaderBar()
headerbar.set_title("M2 PayPad")
headerbar.set_show_close_button(False)
window1.set_titlebar(headerbar)

image1 = builder.get_object("image1")
pixbuf = GdkPixbuf.Pixbuf.new_from_file('/usr/share/m2-kiosk-app/static/m2tec_logo_github.png')
pixbuf = pixbuf.scale_simple(380, 380, GdkPixbuf.InterpType.BILINEAR)
image1.set_from_pixbuf(pixbuf)

payment_box = builder.get_object("payment_box")

f = open('m2_config.json')
config_data = json.load(f)
f.close()
#print("\n--- config data ---: \n" + pprint(str(config_data)))

""" Seiko Epson Corp. Receipt Printer (EPSON TM-T20III) """
p = Usb(0x04b8, 0x0e28, 0, profile="TM-T20III")

def print_line():
    p.text('\n')
    p.set(underline=1)
    p.text("{:<48}".format(' '))
    p.text('\n')    
    p.set(underline=0)

def print_receipt(data):
    
    #pprint(data) 
       
    p.hw('RESET')
    
    # Print heading   
    p.image('m2tec_logo.jpg', center=True)
    p.text('\n')
    # Location data
    p.set(align='center')
    p.text(data['company']['name'] + '\n')
    p.text(data['company']['phone'] + '\n')
    p.text(data['company']['email'] + '\n')
    p.text(data['company']['website'])    

    p.set(align='left')
    print_line()
        
    # Print order lines
    
    order_lines = data['orderlines']
    #print(order_lines)
    
    mnemonic = ''
    
    for line in order_lines:
        #print('\norder line')
        #print(line)
        name = line['product_name']
        qty = str(line['quantity'])
        price = str("{:.2f}".format(line['price']))
        
        # Generate BIP39 recovery phrase
        if name == 'Paper wallet':
            print('-------- paper wallet --------')
            command_list = ['cardano-wallet', 'recovery-phrase', 'generate']

            with subprocess.Popen(command_list, stdout=subprocess.PIPE) as proc:
                mnemonic = proc.stdout.read().decode('UTF-8').rstrip()
                print(mnemonic)  
                  
        # TM-T20III can print 48 characters on one line      
        # Pad elements with format for correct allignment 
        if line['quantity'] == 1:
            p.text(name[:36].ljust(36, ' '))
            p.text(price.rjust(12, ' '))
        else:
            #p.text("{:<36}".format(str(line['name'][:36])) + '\n')
            p.text("{:<36}".format(str(name[:36])))
            total_line_price = str("{:.2f}".format(line['quantity'] * line['price']))
            p.text(total_line_price.rjust(12, ' ')) 
            p.text('    '  + qty + ' x ' + price + '\n')
                         
    print_line()
    
    # Print totals     
    p.text('\n')    
    p.text('Subtotal'.ljust(36, ' '))
    p.text(str(data['subtotal']).rjust(12, ' '))
 
    p.text(str(data['company']['vat_label']).ljust(36, ' '))
    p.text(str(data['total_tax']).rjust(12, ' '))    
    
    print_line()

    p.text('TOTAL'.ljust(36, ' '))
    p.text(str("{:.2f}".format(data['total_with_tax'])).rjust(12, ' '))        
    p.text('\n')  
    p.text('\n')  
            
    if mnemonic != '':
        print_line()
        p.text('Paper wallet')
        print_line()
       
        p.text('Recovery phrase\n')
        
        mnemonic_list = mnemonic.split(' ')
        for i in range(0,6):
            #print(mnemonic_list[i::4])
            part_of_list = mnemonic_list[i::6]
            
            for word in part_of_list:
                p.text(word.ljust(10, ' '))
            p.text('\n')    
        
        print_line()
                
        wallet_id = ws.create_wallet(
                    name="M2tec wallet",
                    mnemonic=mnemonic,
                    passphrase="1234567890")    

        wal = Wallet(wallet_id, backend=WalletREST(port=wallet_port))
        
        #import time
        #while wal.sync_progress() < 1.0:
        #    time.sleep(1)
            
        cardano_address = wal.addresses()[0]
        
        p.text('Receive address\n')
        p.text(cardano_address)
        
        print_line()
        p.text('Receive address QR-code\n')   
        p.qr(cardano_address, center=True, size=8 )
        
    # Print footer
    p.cut()

# Handle payment request for the gamechanger wallet
def payment_request(server, message, path, query, client_context, data):
    print('-------- payment request ----------')

    json_dict = json.loads(message.request_body.data)
    #pprint(json_dict)

    transaction_id = json_dict["name"].split(' ')[1]
    pay_amount = json_dict["total_with_tax"]

    print_receipt(json_dict)
    
    wallet_address = config_data["cardano"]["wallet_testnet_address"]
 
    # Create a Gamechanger QR-code
    qr_code_file_name = '/tmp/shop_qr_code-' + transaction_id + '.png'
    gamechanger.qr_code(qr_code_file_name, transaction_id, wallet_address, pay_amount)

    # Update kiosk display
    pixbuf = GdkPixbuf.Pixbuf.new_from_file(qr_code_file_name)
    pixbuf = pixbuf.scale_simple(380, 380, GdkPixbuf.InterpType.BILINEAR)
    image1.set_from_pixbuf(pixbuf)

    amount_label.set_text("{:.2f}".format(pay_amount))
    payment_box.show()
    
    message.set_status(200)

# Handle payment status for the gamechanger wallet
def payment_status(server, message, path, query, client_context, data):
    print('-------- payment status ----------')

    json_dict = json.loads(message.request_body.data)
    transaction_id = json_dict["transaction_id"]
    requested_amount = json_dict["requested_amount"]

    print("--- config data ---: " + repr(config_data))
    network_type = config_data["cardano"]["network_type"]
    wallet_address = config_data["cardano"]["wallet_testnet_address"]

    #payment_status = koios.payment_validate(network_type, transaction_id, wallet_address, requested_amount)
    payment_status = dummy.payment_validate(network_type, transaction_id, wallet_address, requested_amount)
    
    print("Koios return: " + repr(payment_status))

    tx_json = { "network_type" : network_type, 
                "transaction_id" : transaction_id,
                "wallet_address" : wallet_address,
                "requested_amount": requested_amount,
                "payment_status": payment_status
               }

    # Send answer to Odoo
    base_url = "http://localhost:8069"
    url = base_url + "/pos_cardano/notification"
    headers = {'Content-type': 'application/json'}                    
    r = requests.post(url, headers=headers, json=tx_json)
            
    message.set_status(200)


# Handle payment request for the gamechanger wallet
def clear_display_request(server, message, path, query, client_context, data):
    payment_box.hide()

    pixbuf2 = GdkPixbuf.Pixbuf.new_from_file('/usr/share/m2-kiosk-app/static/m2tec_logo_github.png')
    pixbuf2 = pixbuf.scale_simple(380, 380, GdkPixbuf.InterpType.BILINEAR)
    #print('Setting pixbuf')
    image1.set_from_pixbuf(pixbuf2)

    message.set_status(200)


if __name__ == "__main__":

    # Check if everything is running
    #check_odoo_and_cardano(odoo_port, wallet_port)
    #check_cardano_wallets(ws)

    # Create a server to listen to requests
    server = Soup.Server()
    server.listen_local(9090, Soup.ServerListenOptions(0))
    data = ''
    server.add_handler("/payment-request", payment_request, data)
    server.add_handler("/payment-status", payment_status, data)    
    server.add_handler("/clear-display", clear_display_request, data)
    window1.show_all()
    payment_box.hide()

    Gtk.main()

    print("Exiting...")

